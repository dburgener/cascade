virtual resource bar {
	fn read(domain source) {
		allow(source, this, file, read);
	}
	fn foobar(domain source) {
		allow(source, this, dir, search);
	}
}

resource foo inherits bar {
	fn read(domain source) {
		allow(source, this, dir, read);
	}
	fn foobar(domain source) {
		allow(source, this, dir, search);
	}
}

domain dom {
	foo<bar>.read(this);
	foo<bar>.foobar(this);
}

virtual resource abc {
	fn read(domain source) {
		allow(source, this, file, read);
	}
}

resource xyz inherits abc {
	fn read(domain source) {
		abc.read(source);
	}
}

domain asd {
	asd<abc>.read(this);
	foo<abc>.read(this);
}

domain jkl inherits boo {
	jkl<boo>.read_boo_tmp(this);
}

virtual resource tmp {
	@associated_call
	fn associated_call_from_tmp(domain source) {
		allow(source, tmp, file, [read]);
	}
}

@associate([tmp])
virtual domain boo {
	// Creates new resources boo.tmp and implicitly calls
	// boo.tmp.associated_call_from_tmp(boo)
	//
	// boo.tmp inherits tmp

	fn read_boo_tmp(domain source) {
		allow(source, boo.tmp, file, [read]);
	}
}