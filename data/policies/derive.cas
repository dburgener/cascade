virtual resource foo {
	fn read(domain source) {
		allow(source, this, file, read);
	}

	@associated_call
	fn some_associated_call(domain source) {
		allow(source, this, file, link);
	}
}

virtual resource bar {
	fn read(domain source) {
		allow(source, this, dir, read);
	}

	fn write(domain source) {
		allow(source, this, dir, write);
	}

	@associated_call
	fn some_associated_call(domain source) {
		allow(source, this, dir, add_name);
	}
}

resource custom_define inherits foo, bar {
	fn read(domain source) {
		allow(source, this, lnk_file, read);
	}
}

@derive([read], parents=*)
resource union_all_parents inherits foo, bar {}

@derive([read], parents=foo)
resource derive_from_foo inherits foo, bar {}

@derive(*, *)
resource derive_all inherits foo, bar {}

@derive(*)
resource defaults inherits foo, bar {}

@derive(*, parents=[foo bar])
resource enumerate_parents inherits foo, bar {}

domain some_domain {
	union_all_parents.read(this);
	derive_from_foo.read(this);
	custom_define.read(this);
	name_diff_child.diff_name(this);
	an_alias.read();

	some_child.domtrans(this, derive_from_foo);

	fn call_derive_in_func(domain arg) {
		union_all_parents.read(arg);
	}
}

@derive([some_associated_call], parents=*)
virtual resource to_associate inherits foo, bar {}

@associate([to_associate])
domain associates {}

virtual resource name_diff1 {
	fn diff_name(domain a) {
		allow(a, this, file, relabelfrom);
	}
}

virtual resource name_diff2 {
	fn diff_name(domain b) {
		allow(b, this, file, relabelto);
	}
}

@derive([diff_name], parents=*)
resource name_diff_child inherits name_diff1, name_diff2 {}

virtual domain some_domain_parent {
	fn domtrans(domain source, resource exec) {
		domain_transition(source, exec, this);
	}
}

@derive([domtrans], parents=[some_domain_parent])
domain some_child inherits some_domain_parent {}

@derive(*, *)
resource overwrite_one inherits bar {
	// define our own read
	fn read(domain source) {
		allow(source, this, lnk_file, read);
	}
}

@derive(*, *)
resource overwrite_two inherits bar {
	// define our own read
	fn read(domain source) {
		allow(source, this, lnk_file, read);
	}

	// define our own write
	fn write(domain source) {
		allow(source, this, lnk_file, write);
	}
}

@alias(an_alias)
resource aliased_child inherits bar {}

// Derive arg call test

virtual resource a {
	fn read(domain source) {
		allow(source, this, file, read);
	}
	fn write(domain source) {
		allow(source, this, file, write);
	}
}

resource b1 inherits a {
	fn read(domain source) {
		allow(source, this, lnk_file, read);
	}
	fn write(domain source) {
		allow(source, this, lnk_file, write);
	}
}

resource b2 inherits a {}

// c and d have similar functions with different arg names
virtual resource c {
	fn call_arg(a to_call_read, domain source) {
		to_call_read.read(source);
	}
}

virtual resource d {
	fn call_arg(a to_call_write, domain source) {
		to_call_write.write(source);
	}
}

// Should derive call_arg with read and write and a rewritten argument name
resource e inherits c,d {}

domain f {
	e.call_arg(b1, this);
	e.call_arg(b2, this);
}

// Derive with this
virtual resource derive_this_2 inherits foo {
	fn my_func(domain source) {
		this.read(source);
	}

	fn use_this(domain source) {
		this.my_func(source);
	}
}

virtual resource derive_this_1 {
	fn use_this(domain source) {
		// do something else
		allow(source, this, file, read);
	}
}

resource derive_this_3 inherits derive_this_2, derive_this_1 {}

domain call_derive_this {
	// Please never write real policy that uses the word "this" this confusingly
	derive_this_3.use_this(this);
}

virtual resource alias_parent1 {
	@alias(alias1)
	fn has_alias(domain source) {
		allow(source, this, file, read);
	}
}

virtual resource alias_parent2 inherits alias_parent1 {
	fn alias1(domain source) {
		allow(source, this, file, write);
	}
}

@alias(alias2)
resource my_res inherits alias_parent2 {}
