virtual resource foo {
	fn read(domain source) {
		allow(source, this, file, read);
	}

	@associated_call
	fn some_associated_call(domain source) {
		allow(source, this, file, link);
	}
}

virtual resource bar {
	fn read(domain source) {
		allow(source, this, dir, read);
	}

	fn write(domain source) {
		allow(source, this, dir, write);
	}

	@associated_call
	fn some_associated_call(domain source) {
		allow(source, this, dir, add_name);
	}
}

resource custom_define inherits foo, bar {
	fn read(domain source) {
		allow(source, this, lnk_file, read);
	}
}

@derive([read], strategy=*)
resource strategy_union inherits foo, bar {}

@derive([read], strategy=[foo])
resource strategy_foo inherits foo, bar {}

@derive(*, strategy=*)
resource derive_all inherits foo, bar {}

domain some_domain {
	strategy_union.read(this);
	strategy_foo.read(this);
	custom_define.read(this);
	name_diff_child.diff_name(this);

	some_child.domtrans(this, strategy_foo);
}

@derive([some_associated_call], strategy=*)
virtual resource to_associate inherits foo, bar {}

@associate([to_associate])
domain associates {}

virtual resource name_diff1 {
	fn diff_name(domain a) {
		allow(a, this, file, relabelfrom);
	}
}

virtual resource name_diff2 {
	fn diff_name(domain b) {
		allow(b, this, file, relabelto);
	}
}

@derive([diff_name], strategy=*)
resource name_diff_child inherits name_diff1, name_diff2 {}

virtual domain some_domain_parent {
	fn domtrans(domain source, resource exec) {
		domain_transition(source, exec, this);
	}
}

@derive([domtrans], strategy=[some_domain_parent])
domain some_child inherits some_domain_parent {}
