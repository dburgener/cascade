virtual resource tmp {
	@associated_call
	fn associated_call_from_tmp(domain source) {
		allow(source, tmp, file, [read]);
	}

	fn not_an_associated_call(domain source) {
		allow(source, tmp, file, [write]);
	}
}

virtual resource user_tmp {
	@associated_call
	fn associated_call_from_user_tmp(userdomain source) {
		allow(source, user_tmp, file, [read]);
	}
}

virtual resource var {
	@associated_call
	fn associated_call_from_var(domain source) {
		allow(source, var, file, [read]);
	}
}

virtual resource bin {
	// no @associated_call
	fn not_an_associated_call_from_bin(domain source) {
		allow(source, bin, file, [read]);
	}
}

@associate([tmp var])
virtual domain foo {
	// Creates new resources foo.tmp and foo.var, and implicitly calls
	// foo.tmp.associated_call_from_tmp(foo) and foo.var.associated_call_from_var(foo)
	//
	// foo.tmp inherits tmp
	// foo.var inherits var

	tmp.associated_call_from_tmp(this);
	this.tmp.not_an_associated_call(this);
}

@associate([bin])
virtual domain bar inherits foo {
	// Creates new resources bar.tmp, bar.var and bar.bin, and implicitly calls
	// bar.tmp.associated_call_from_tmp(bar), bar.var.associated_call_from_var(bar) and
	// bar.bin.associated_call_from_var(bar)
	//
	// bar.bin inherits bin
	// bar.tmp inherits foo.tmp
	// bar.var inherits foo.var
}

domain baz inherits bar {
	// Creates new resources baz.tmp, baz.var and baz.bin, and implicitly calls
	// baz.tmp.associated_call_from_tmp(baz), baz.var.associated_call_from_var(baz) and
	// baz.bin.associated_call_from_var(baz)
	//
	// baz.bin inherits bar.bin
	// baz.tmp inherits bar.tmp
	// baz.var inherits bar.var
}

domain qux {
	// Calls synthetic functions.
	foo.tmp.associated_call_from_tmp(this);
	bar.tmp.associated_call_from_tmp(this);
	baz.tmp.associated_call_from_tmp(this);

	// Explicit reference
	allow(this, bar.bin, file, write);
}

virtual domain nest_parent {
	virtual resource nest_resource {
		@associated_call
		fn call(domain source) {
			allow(source, this, file, read);
		}
	}

	allow(this, nest_resource, file, write);
}

domain nest_child inherits nest_parent {
	extend nest_resource {
		allow(nest_child, this, file, ioctl);
		file_context("/some/path/to/file", [file], system_u:object_r:nest_child.nest_resource:s0);
	}

	foo.tmp.not_an_associated_call();
}

extend nest_child {
	extend nest_resource {
		allow(nest_child, this, dir, remove_name);
	}
}

virtual domain userdomain {}

@associate([user_tmp])
domain foo_userdomain inherits userdomain {
	// Creates new resources foo_userdomain.user_tmp, and implicitly calls
	// foo_userdomain.user_tmp.associated_call_from_user_tmp(foo_userdomain)
	//
	// foo_userdomain.user_tmp inherits tmp
}

virtual domain diamond1 inherits foo {}
virtual domain diamond2 inherits foo {}

// Gets two copies of associated resources via multiple inheritance, but they should collapse to one
domain diamond3 inherits diamond1, diamond2 {}
